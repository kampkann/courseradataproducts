find
args(find)
find(java)
find.java()
find.matrix()
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(xlsx)
xldata = read.xlsx("k:/smstest/SIGNATURE_CHECK_LIST.xslx")
xldata = read.xlsx("k:/smstest/SIGNATURE_CHECK_LIST.xslx", sheetIndex=1,header=TRUE)
xldata = read.xlsx("k:/smstest/SIGNATURE_CHECK_LIST.xlsx", sheetIndex=1,header=TRUE)
? xldata
xldata = read.xlsx("k:/smstest/IC_ANALYSIS_SET_1.xlsx", sheetIndex=1,header=TRUE)
xldata = read.xlsx("k:/smstest/BC_INVENTORY.xlsx", sheetIndex=1,header=TRUE)
head(xldata)
library(xml)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootnode <- xmlRoot(doc)
xmlname(rootnode)
xmlName(rootnode)
names(rootnode)
rootnode[[1]
;
rootnode[1][1]
rootnode[2
][1]
rootnode[2
][2]
rootnode[3
][2]
rootnode[3
][1]
xmlSApply(rootnode,xmlValue)
find.package(devtools)
install.packages(devtools)
install.packages("devtools")
find.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages("xlsx")
install.packages("Kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
x <- 1:100
x
x <- c(0.5, 1)
x
x <- c(true, false, true)
x <- c(TRUE, FALSE, TRUE)
x
x <- c(1.7, "ze")
x
y <- c("asef", TRUE)
y
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m[1][1]
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- matrix(1:6, ncol = 2, nrow = 3)
m
m <- matrix(6:1, ncol = 2, nrow = 3)
m
m <- 1:10
m
dim(m) <- c(2, 5)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- list(1, "a", TRUE, 1+4i)
x
x <- factof(c("yes","yes","no","yes","no"," "))
x <- factor(c("yes","yes","no","yes","no"," "))
x
x <- factor(c("yes","yes","no","yes","no","x"))
x
x <- factor(c("yes","yes","no","yes","no","niram"))
x
x <- factor(c("yes","yes","no","yes","no","maa"))
x
x <- factor(c("yes","yes","no","yes","no","ptfr"))
x
table(x)
unclass(x)
x <- factor(c("yes","yes","no","yes","no","ptfr"), levels = c("ptfr", "yes", "no"))
x
x <- factor(c("yes","yes","no","yes","no","ptfr"), levels = c("ptfr", "yes"))
x
x <- factor(c("yes","yes","no","yes","no","ptfr"), levels = c("ptfr"))
x
is.na(x)
is.nan(x)
x <- data.frame(foo = 1:10, bar = c(T,T,F,F,T,T,F,F,F))
x <- data.frame(foo = 1:10, bar = c(T,T,F,F,T,T,F,F,F,T))
X
x
nrow(x)
ncol(x)
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "fb", "x")
names(x) <- c("foo", "bar")
x
names(x)
x
m <- matrix(1:4, nros = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a"), c("b"))
dimnames(m) <- list(c("a", "c"), c("b","c"))
m
x <- 4L
attribute(x)
class(x)
x <- c(4, TRUE)?
;
x <- c(4, TRUE)
class(x)
x
x <-(1,3,5)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a", "b", TRUE)
x[[1]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[ x > 10] <- 4
x
x <- read.table("K:\COURSERA\RPROG\hw1_data.csv")
x <- read.table("K:/COURSERA/RPROG/hw1_data.csv")
head(x)
x
x <- read.table("K:/COURSERA/RPROG/hw1_data.csv", ",")
arg(read.table)
x <- read.csv("K:/COURSERA/RPROG/hw1_data.csv")
x
head(x, 2)
rows(x)
x.rows()
length(x)
nrow(x)
tail(x, 2)
x[43]
x
x[1][43]
x[43][1]
x[ozone, 47]
x[Ozone, 47]
x[47, Ozone]
names(x)
x.4
x(153)
x[153]
x[[1]]
x[$Ozone]
x["Ozone"]
x["Ozone"][[140]]
x["Ozone"][140]
x$Ozone
x$Ozone[100]
x$Ozone[47]
View(x)
View(xldata)
X
view(x)
View(m)
View(x)
View(xldata)
View(x)
view(x)
view()
x
x$Ozone
bad = is.na(x$Ozone)
x[!bad]
x$Ozone[!bad]
nrow(x$Ozone[!bad])
ncol
nrow
nrow()
nrow(x$Ozone[!bad])
nrow(x$Ozone)
complete.cases
crow
crow()
nrow(x)
nrow(x$Ozone)
x$Ozone
nrow([x$Ozone])
nrow(x$Ozone)
class(x$Ozone)
x.length
length(x)
length(x$Ozone)
length(x$Ozone[!bad])
length(x$Ozone[bad])
mean(1:10)
mean(x$Ozone[!bad])
mean(x$Ozone)
mean(x$Ozone[!bad])
x$Ozone[x>31 ]
Oz1 = x$Ozone[!bad]
x[oz1]
oz1
Oz1
x[Oz1]
u = x$Ozone[!bad] > 31
t = x$Temp[!bad] > 90
x[t]
x$Solar.R[t]
mean(x$Solar.R[t])
x
xcomp = complete.cases(x)
length(x$Ozone)
length(xcomp$Ozone)
xcomp
length(x$Ozone[xcomp])
subset(x, Ozone > 31)
subset(x, Ozone > 31 & Temp > 90)
subset(x, Ozone > 31 & Temp > 90 select = c(Solar.R))
subset(x, Ozone > 31 & Temp > 90, select = c(Solar.R))
mean(subset(x, Ozone > 31 & Temp > 90 select = c(Solar.R)))
sr <- subset(x, Ozone > 31 & Temp > 90 select = c(Solar.R))
sr <- subset(x, Ozone > 31 & Temp > 90, select = c(Solar.R))
sr
mean(sr$Solar.R)
tm1 = subset(x, Month = 5, select = c(Temp))
tm1
mean(tm1$Temp)
tm1 = subset(x, Month = 6, select = c(Temp))
mean(tm1$Temp)
tm1 = subset(x, Month = 6 & is.na(Ozone) & is.na(Solar.R), select = c(Temp))
mean(tm1$Temp)
max(1:10)
tO = subset(x, Month = 5, select(Ozone))
tO = subset(x, Month = 5, select= c(Ozone))
max(to)
max(tO)
max(tO$Ozone)
tO = subset(x, Month = 5 & is.na(OZone), select= c(Ozone))
tO
tO = subset(x[xComp], Month = 5 , select= c(Ozone))
tO = subset(x[xcomp], Month = 5 , select= c(Ozone))
x[xcomp]
xcomp
x$Ozone[xcomp]
x[xcomp]
xcomp
tO = subset(x[xcomp], Month = 5 , select= c(Ozone))
tO = subset(x, Month = 5, select= c(x$Ozone[xcomp]))
x$Ozone[xcomp]
x[xcomp, ]
xcx = x[xcomp, ]
xcx
tO = subset(xcx, Month = 5, select= c(Ozone))
tO
mean(tO$Ozone)
max(tO$Ozone)
xcx
tO = subset(xcx, Month = 5, select= c(Ozone, Month))
tO
tO = subset(xcx, Month == 5, select= c(Ozone, Month))
tO
max(tO$Ozone)
tx = subset(xcx, Month == 6, select= c(Temp, Month))
tx
mean(tx$Temp)
tx = subset(x, Month == 6, select= c(Temp, Month))
mean(tx$Temp)
x <- 1:10
x <- 1:10
x <- 1:10
x
install.packages("RMySQL", type = "source")
mySQLhome
Sys.setenv(MYSQL_HOME='K:/MySQL/MySQL Server 5.6/')
install.packages("RMySQL", type = "source")
library(RMySQL)
library(RMySQL)
packages()
install.packages("RMySQL")
sys.getenv("MYSQL_HOME")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
load("RMySQL")
load(RMySQL)
install.packages("RMySQL", type = "source")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type = "source")
load(RTools)
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
load(RTools)
install.packages("devtools")
load(devtools)
find_rtools()
library(devtools)
find_rtools()
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(10)
h(10.)
cbind(10., 3L)
z <- z + cbind(10., 3L)
install.packages("shiny")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("manipulate")
barplot( df.parking$state,
,names.arg=df.parking$state
,cex.axis = 1
,cex.names = .4
,cex.lab = 1.5
,main=" Top 10 harmful strom events "               # Main heading
,xlab="EVENTS"                                      # x label
,ylab="Casuality count"                             # y label
)
df.parking <- read.csv("K:/COURSERA/DATAPROD/Parking_Citations.csv")
barplot( df.parking$state,
,names.arg=df.parking$state
,cex.axis = 1
,cex.names = .4
,cex.lab = 1.5
,main=" Top 10 harmful strom events "               # Main heading
,xlab="EVENTS"                                      # x label
,ylab="Casuality count"                             # y label
)
aggregate(INJURIES ~ EVTYPE, data = df.casualty, sum)
df.parking$count <- NULL
df.parking$ImportDate <- NULL
df.parking <- read.csv("K:/COURSERA/DATAPROD/Parking_Citations.csv")
346896
x <- rep( 1, 347896)
df.parking$count <- x
x <- rep( 1, 346896)
df.parking$count <- x
x <- aggregate( count ~ state, data = df.parking, sum)
x
x <- aggregate( count ~ state, data = df.parking, mean)
x
x <- aggregate( count ~ state, data = df.parking, sum)
x
barplot( df.parking$count,
,names.arg=df.parking$state
,cex.axis = 1
,cex.names = .4
,cex.lab = 1.5
,main=" Top 10 harmful strom events "               # Main heading
,xlab="EVENTS"                                      # x label
,ylab="Casuality count"                             # y label
)
barplot( x$count,
,names.arg=x$state
,cex.axis = 1
,cex.names = .4
,cex.lab = 1.5
,main=" Top 10 harmful strom events "               # Main heading
,xlab="EVENTS"                                      # x label
,ylab="Casuality count"                             # y label
)
View(x)
View(x)
View(df.parking)
x1 <- df.parking$violFine
summary(x1)
gsub("[[$]]", "", "x$120.80")
gsub("[[$]]", "", "$120.80")
gsub("[[$]]", " ", "$120.80")
gsub("[[:$:]]", " ", "$120.80")
gsub('$', '', '$120.80')
gsub("[[:$:]]", " ", "$120.80")
gsub($120.80, '')
gsub()
data(cars)
x <- data(cars)
x
requrie(datasets)
library(datasets)
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1)
cars
stat(cars)
summary(cars)
summary(animals)
summary(Animals)
load(Animals)
library(MASS)
data()
summary(Nile)
nile
Nile
load(Nile)
data(Nile)
Nile
rm(Nile)
rm(x1)
rm(x)
rm(cars)
data(airmiles)
airmiles
data(faithful)
faithful
data(cabbages)
cabbages
data(road)
summary(road)
View(road)
summary(phones)
data(Animals)
Animals
View(Animals)
df.parking$fine <-
sub(as.character(df.parking$violFine))
sub(as.character(df.parking$violFine))
y <- sub('$', '', as.character(df.parking$violFine))
y <- sub('$', ' ', as.character(df.parking$violFine))
y <- sub('$',  as.character(df.parking$violFine))
y <- sub('$',  as.character(df.parking$violFine), ' ')
y <- sub("$", ' ' ,as.character(df.parking$violFine))
y <- sub("$", ' ' ,as.character(df.parking$violFine))
y <- sub("\$", ' ' ,as.character(df.parking$violFine))
summary(y)
rm y
rm(y)
rm(Animals)
rm(cabbages)
rm(road)
rm(faithful)
rm(airmiles)
names df.parking
summary(df.parking)
summary(df.parking$violFine)
summary(as.numeric(df.parking$violFine)
)
summary(as.numeric(as.character(df.parking$violFine)))
x <- as.character(df.parking$Violfine)
df.parking <- read.csv("K:/COURSERA/DATAPROD/Parking_Citations.csv", stringsAsFactors=F)
summary(as.numeric(df.parking$violFine)
)
summary(df.parking)
df.parking <- read.csv("K:/COURSERA/DATAPROD/Parking_Citations.csv")
shiny::runApp('Desktop/COURSERA - DDP/Shiny')
shiny::runApp('Desktop/COURSERA - DDP/Shiny')
shiny::runApp('Desktop/COURSERA - DDP/Shiny')
statelist
croplist
shiny::runApp('Desktop/COURSERA - DDP/Shiny')
shiny::runApp('Desktop/COURSERA - DDP/Shiny')
setwd("C:/Users/TEMP/Desktop/COURSERA - DDP/Shiny")
shiny::runApp()
shiny::runApp('dataproducts')
setwd("C:/Users/TEMP/Desktop/COURSERA - DDP/Shiny/dataproducts")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
